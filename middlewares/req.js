function _0x4d0f() { const _0x4d530d = ['1137558KqumuQ', 'isDirectory', 'notify', 'sendMessage', 'restartRequired', 'endsWith', 'pollUpdates', '7Yunqtl', '135952rPglYL', 'cwd', '@s.whatsapp.net', '@g.us', 'replace', 'Reconnecting...', 'messages', 'writeToFile', 'key', 'join', 'delete', 'sessions', 'Chrome', 'store', 'get', 'includes', '10449030AxfyOw', '.json', '/contacts/', 'close', 'DELETE\x20FROM\x20instance\x20WHERE\x20client_id\x20=\x20?', '1083512ayddyX', 'checked', '182066bedXHg', '4NokVtw', 'unlinkSync', 'readdir', 'forEach', 'update', '1848102OQsKNJ', 'messages.upsert', 'set', 'bind', 'default', 'headersSent', 'log', 'error', 'fromObject', 'fromMe', 'statusCode', 'isLegacy', 'type', 'undefined', 'chats.set', 'remoteJid', 'groupMetadata', 'Unable\x20to\x20create\x20session.', '18lsNavt', 'chats', '_store', 'loadMessage', 'messages.update', 'md_', 'split', '214960DmNaLd', 'logout', 'lstatSync', 'onWhatsApp', 'has']; _0x4d0f = function () { return _0x4d530d; }; return _0x4d0f(); } (function (_0x885681, _0x393824) { const _0xc9fd92 = _0x3370, _0x46d407 = _0x885681(); while (!![]) { try { const _0x121f90 = -parseInt(_0xc9fd92(0x1fb)) / 0x1 * (-parseInt(_0xc9fd92(0x1fa)) / 0x2) + parseInt(_0xc9fd92(0x1db)) / 0x3 + parseInt(_0xc9fd92(0x1f8)) / 0x4 + -parseInt(_0xc9fd92(0x1d6)) / 0x5 + -parseInt(_0xc9fd92(0x1bd)) / 0x6 * (-parseInt(_0xc9fd92(0x1e2)) / 0x7) + -parseInt(_0xc9fd92(0x1e3)) / 0x8 * (parseInt(_0xc9fd92(0x1cf)) / 0x9) + -parseInt(_0xc9fd92(0x1f3)) / 0xa; if (_0x121f90 === _0x393824) break; else _0x46d407['push'](_0x46d407['shift']()); } catch (_0x52e4e4) { _0x46d407['push'](_0x46d407['shift']()); } } }(_0x4d0f, 0x30e8a)); function _0x3370(_0x53ab60, _0xabf312) { const _0x4d0f6b = _0x4d0f(); return _0x3370 = function (_0x3370b5, _0x28c38c) { _0x3370b5 = _0x3370b5 - 0x1b9; let _0x1f799a = _0x4d0f6b[_0x3370b5]; return _0x1f799a; }, _0x3370(_0x53ab60, _0xabf312); } import { existsSync, unlinkSync, readdir } from 'fs'; import { join } from 'path'; import _0x167213 from 'pino'; import _0x7cff1a, { makeInMemoryStore, Browsers, DisconnectReason, delay, useMultiFileAuthState, getAggregateVotesInPollMessage } from '@whiskeysockets/baileys'; import { toDataURL } from 'qrcode'; import _0x33734f from '../dirname.js'; import _0x54b9ef from '../response.js'; import _0x317f2e from '../database/dbpromise.js'; import { webhook } from '../controllers/botController.js'; import { webhookPoll } from '../functions/pollWebhook.js'; import { decodeObject, deleteFileIfExists } from '../functions/function.js'; import _0x1f188b from 'fs'; import _0x443282 from 'path'; const sessions = new Map(), retries = new Map(), sessionsDir = (_0x2a061d = '') => { const _0x9a46e9 = _0x3370; return join(_0x33734f, _0x9a46e9(0x1ee), _0x2a061d ? _0x2a061d + _0x9a46e9(0x1f4) : ''); }, isSessionExists = _0x5acf87 => { const _0x2f3f23 = _0x3370; return sessions[_0x2f3f23(0x1da)](_0x5acf87); }, isSessionFileExists = _0x4cff7b => { return existsSync(sessionsDir(_0x4cff7b)); }, shouldReconnect = _0x54cbf0 => { const _0x3dcf41 = _0x3370; let _0x3cfea6 = parseInt(0x5), _0x269911 = retries['get'](_0x54cbf0) ?? 0x0; _0x3cfea6 = _0x3cfea6 < 0x1 ? 0x1 : _0x3cfea6; if (_0x269911 < _0x3cfea6) return ++_0x269911, console[_0x3dcf41(0x1c3)](_0x3dcf41(0x1e8), { 'attempts': _0x269911, 'sessionId': _0x54cbf0 }), retries[_0x3dcf41(0x1bf)](_0x54cbf0, _0x269911), !![]; return ![]; }, createSession = async (_0x5d50e9, _0x2f3306 = ![], _0x398029 = null, _0x3f5e2a) => { const _0x1cb5e4 = _0x3370, _0x44ad69 = 'md_' + _0x5d50e9, _0x1c0b62 = _0x167213({ 'level': 'warn' }), _0x41da35 = makeInMemoryStore({ 'logger': _0x1c0b62 }), { state: _0x33ae09, saveCreds: _0x1a2113 } = await useMultiFileAuthState(sessionsDir(_0x44ad69)), _0x41658b = { 'auth': _0x33ae09, 'printQRInTerminal': ![], 'logger': _0x1c0b62, 'browser': Browsers['ubuntu'](_0x1cb5e4(0x1ef)), 'syncFullHistory': !![], 'getMessage': _0x1cda59 }; async function _0x1cda59(_0x4d7cb6) { const _0x3071d6 = _0x1cb5e4; if (_0x41da35) { const _0x2b67b2 = await _0x41da35[_0x3071d6(0x1d2)](_0x4d7cb6?.[_0x3071d6(0x1cc)], _0x4d7cb6?.['id']); return _0x2b67b2?.['message'] || undefined; } return proto['Message'][_0x3071d6(0x1c5)]({}); } const _0x2405b1 = _0x7cff1a[_0x1cb5e4(0x1c1)](_0x41658b); !_0x2f3306 && (_0x41da35['readFromFile'](sessionsDir(_0x5d50e9 + _0x1cb5e4(0x1d1))), _0x41da35[_0x1cb5e4(0x1c0)](_0x2405b1['ev'])), sessions[_0x1cb5e4(0x1bf)](_0x5d50e9, { ..._0x2405b1, 'store': _0x41da35, 'isLegacy': _0x2f3306 }), _0x2405b1['ev']['on']('creds.update', _0x1a2113), _0x2405b1['ev']['on'](_0x1cb5e4(0x1cb), ({ chats: _0x26925a }) => { const _0x533630 = _0x1cb5e4; _0x2f3306 && _0x41da35[_0x533630(0x1d0)]['insertIfAbsent'](..._0x26925a); }), _0x2405b1['ev']['on'](_0x1cb5e4(0x1d3), async _0x3919a6 => { const _0x3c621d = _0x1cb5e4; console[_0x3c621d(0x1c3)]('messages\x20updated'); const _0x18bd32 = _0x3919a6[0x0], _0x10d56c = await _0x1cda59(_0x18bd32?.[_0x3c621d(0x1eb)]), _0x26b719 = _0x18bd32?.[_0x3c621d(0x1bc)], { uid: _0x9298a5, client_id: _0x3f55d2 } = decodeObject(_0x5d50e9); if (_0x10d56c) { const _0x3ddbe6 = getAggregateVotesInPollMessage({ 'message': _0x10d56c, 'pollUpdates': _0x26b719[_0x3c621d(0x1e1)] }); webhookPoll(_0x9298a5, _0x3f55d2, _0x5d50e9, _0x3ddbe6, _0x10d56c, _0x2405b1, _0x26b719); } }), _0x2405b1['ev']['on'](_0x1cb5e4(0x1be), async _0x4fc4fc => { const _0x5cc2f3 = _0x1cb5e4, _0x8719fa = _0x4fc4fc[_0x5cc2f3(0x1e9)][0x0]; !_0x8719fa[_0x5cc2f3(0x1eb)][_0x5cc2f3(0x1c6)] && _0x4fc4fc[_0x5cc2f3(0x1c9)] === _0x5cc2f3(0x1dd) && (await delay(0x3e8), await webhook(_0x4fc4fc, _0x2405b1, _0x5d50e9)); }), _0x2405b1['ev']['on']('connection.update', async _0x218c7b => { const _0x185ca1 = _0x1cb5e4, { connection: _0x156ab1, lastDisconnect: _0x3b02ef } = _0x218c7b, _0xfd9e7e = _0x3b02ef?.[_0x185ca1(0x1c4)]?.['output']?.[_0x185ca1(0x1c7)]; _0x156ab1 === 'open' && retries[_0x185ca1(0x1ed)](_0x5d50e9); if (_0x156ab1 === _0x185ca1(0x1f6)) { if (_0xfd9e7e === DisconnectReason['loggedOut'] || !shouldReconnect(_0x5d50e9)) return _0x398029 && !_0x398029[_0x185ca1(0x1c2)] && _0x54b9ef(_0x398029, 0x1f4, ![], _0x185ca1(0x1ce)), deleteSession(_0x5d50e9, _0x2f3306); setTimeout(() => { createSession(_0x5d50e9, _0x2f3306, _0x398029); }, _0xfd9e7e === DisconnectReason[_0x185ca1(0x1df)] ? 0x0 : parseInt(0x1388)); } if (_0x218c7b['qr']) { if (_0x398029 && !_0x398029[_0x185ca1(0x1c2)]) try { const _0x4b7060 = await toDataURL(_0x218c7b['qr']); _0x54b9ef(_0x398029, 0xc8, !![], 'QR\x20code\x20received,\x20please\x20scan\x20the\x20QR\x20code.', { 'qr': _0x4b7060 }); return; } catch { _0x54b9ef(_0x398029, 0x1f4, ![], 'Unable\x20to\x20create\x20QR\x20code.'); } try { await _0x2405b1[_0x185ca1(0x1d7)](); } catch { } finally { deleteSession(_0x5d50e9, _0x2f3306); } } }); }, getSession = _0x10cf15 => { const _0x442f73 = _0x3370; return sessions[_0x442f73(0x1f1)](_0x10cf15) ?? null; }, deleteDirectory = _0x5dde70 => { _0x1f188b['existsSync'](_0x5dde70) && (_0x1f188b['readdirSync'](_0x5dde70)['forEach'](_0xd3278e => { const _0x3fab3a = _0x3370, _0x102ca9 = _0x5dde70 + '/' + _0xd3278e; _0x1f188b[_0x3fab3a(0x1d8)](_0x102ca9)[_0x3fab3a(0x1dc)]() ? deleteDirectory(_0x102ca9) : _0x1f188b[_0x3fab3a(0x1b9)](_0x102ca9); }), _0x1f188b['rmdirSync'](_0x5dde70)); }, deleteSession = async (_0x3f355d, _0x3a32e2 = ![]) => { const _0x2aeea9 = _0x3370, _0xb013aa = _0x2aeea9(0x1d4) + _0x3f355d, _0x87df9e = _0x3f355d + _0x2aeea9(0x1d1); await _0x317f2e(_0x2aeea9(0x1f7), [_0x3f355d]); const _0x65589 = process[_0x2aeea9(0x1e4)](); deleteFileIfExists(_0x65589 + _0x2aeea9(0x1f5) + _0x3f355d + '.json'), isSessionFileExists(_0xb013aa) && deleteDirectory(sessionsDir(_0xb013aa)), isSessionFileExists(_0x87df9e) && unlinkSync(sessionsDir(_0x87df9e)), sessions['delete'](_0x3f355d), retries['delete'](_0x3f355d); }, getChatList = (_0x5387e8, _0x343b8f = ![]) => { const _0x25b6d4 = _0x3370, _0x1175fa = _0x343b8f ? _0x25b6d4(0x1e6) : _0x25b6d4(0x1e5); return getSession(_0x5387e8)['store'][_0x25b6d4(0x1d0)]['filter'](_0x742922 => { return _0x742922['id']['endsWith'](_0x1175fa); }); }, isExists = async (_0x3cee0f, _0x529c28, _0x1f0024 = ![]) => { const _0x462030 = _0x3370; console[_0x462030(0x1c3)]({ 'jid': _0x529c28 }); try { let _0x1ec0bc; if (_0x1f0024) return _0x1ec0bc = await _0x3cee0f['groupMetadata'](_0x529c28), Boolean(_0x1ec0bc['id']); if (_0x3cee0f[_0x462030(0x1c8)]) _0x1ec0bc = await _0x3cee0f[_0x462030(0x1d9)](_0x529c28); else { ;[_0x1ec0bc] = await _0x3cee0f[_0x462030(0x1d9)](_0x529c28); if (typeof _0x1ec0bc === _0x462030(0x1ca)) { console[_0x462030(0x1c3)](_0x462030(0x1f9)); const _0x57d3a6 = _0x529c28[_0x462030(0x1e7)](_0x462030(0x1e5), '');[_0x1ec0bc] = await _0x3cee0f[_0x462030(0x1d9)]('+' + _0x57d3a6); } } return _0x1ec0bc['exists']; } catch { return ![]; } }, sendMessage = async (_0x149822, _0x2d8fb1, _0x28c107) => { const _0x4979bc = _0x3370; try { return await delay(0x3e8), _0x149822[_0x4979bc(0x1de)](_0x2d8fb1, _0x28c107); } catch { return Promise['reject'](null); } }, getGroupData = async (_0x5b8ce1, _0x5a6615) => { const _0x396991 = _0x3370; try { const _0x211262 = await _0x5b8ce1[_0x396991(0x1cd)](_0x5a6615); return _0x211262; } catch { return Promise['reject'](null); } }, formatPhone = _0xd5f87b => { const _0x2ce285 = _0x3370; if (_0xd5f87b['endsWith'](_0x2ce285(0x1e5))) return _0xd5f87b; let _0x3283dc = _0xd5f87b[_0x2ce285(0x1e7)](/\D/g, ''); return _0x3283dc += _0x2ce285(0x1e5); }, formatGroup = _0x565477 => { const _0x320f87 = _0x3370; if (_0x565477[_0x320f87(0x1e0)](_0x320f87(0x1e6))) return _0x565477; let _0x482802 = _0x565477['replace'](/[^\d-]/g, ''); return _0x482802 += '@g.us'; }, cleanup = () => { const _0x5da4b0 = _0x3370; console[_0x5da4b0(0x1c3)]('Running\x20cleanup\x20before\x20exit.'), sessions[_0x5da4b0(0x1bb)]((_0x2ca215, _0x2cdecf) => { const _0x36f52a = _0x5da4b0; !_0x2ca215[_0x36f52a(0x1c8)] && _0x2ca215[_0x36f52a(0x1f0)][_0x36f52a(0x1ea)](sessionsDir(_0x2cdecf + '_store')); }); }, init = () => { const _0x3d520f = _0x3370, _0x239e02 = _0x443282[_0x3d520f(0x1ec)](_0x33734f, 'sessions'); _0x1f188b[_0x3d520f(0x1ba)](_0x239e02, (_0x2464e6, _0x1dce26) => { const _0x1433a8 = _0x3d520f; if (_0x2464e6) throw _0x2464e6; for (const _0x18c995 of _0x1dce26) { if (!_0x18c995['endsWith'](_0x1433a8(0x1f4)) || !_0x18c995['startsWith']('md_') || _0x18c995[_0x1433a8(0x1f2)](_0x1433a8(0x1d1))) continue; const _0x4745fc = _0x18c995[_0x1433a8(0x1e7)](_0x1433a8(0x1f4), ''), _0x1db7c1 = _0x4745fc[_0x1433a8(0x1d5)]('_', 0x1)[0x0] !== 'md', _0x4fb5e9 = _0x4745fc['substring'](_0x1db7c1 ? 0x7 : 0x3); createSession(_0x4fb5e9, _0x1db7c1); } }); }; export { isSessionExists, createSession, getSession, deleteSession, getChatList, isExists, sendMessage, formatPhone, formatGroup, cleanup, init, getGroupData };